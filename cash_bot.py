from dotenv import load_dotenv
from logging import StreamHandler
import os
import sys
import logging

from telegram.ext import CommandHandler, Updater, MessageHandler, Filters

from db import BotDB


KSENIA_ID = 157256682
ARTEM_ID = 291198651

logger = logging.getLogger(__name__)


load_dotenv()
secret_token = os.getenv('TOKEN')

db = BotDB('telebot.db')


def wake_up(update, context):  # –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã id
    user_id = context._user_id_and_data[0]
    username = update.message.chat.username
    name = update.message.chat.first_name
    chat = update.effective_chat
    if not db.user_exists(user_id):
        db.add_user(user_id, username)

    if name == 'Ksenia':
        text = '–ü—Ä–∏–≤–µ—Ç, –ö—Å—é—à üë©! C–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª–∞?'
    elif name == 'Artem':
        text = '–ü—Ä–∏–≤–µ—Ç, –¢—ë–º! C–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª?'
    else:
        text = '–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –ü–æ–ø—Ä–æ—Å–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ —á–∞—Ç.'
    send_message(context, chat.id, text)


def calculation(context, update, amount=0):
    user_id = context._user_id_and_data[0]
    name = update.message.chat.first_name
    if amount != 0:
        db.add_sum(user_id, amount)
    total_paid = db.total()
    total_user = db.total(user_id)

    one_person_owes = total_paid / 2  # –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_balance = total_user - one_person_owes
    if user_balance < 0:
        message = f'–° —Ç–µ–±—è {"%.2f" % abs(user_balance)}'
        return message
    elif user_balance > 0:
        message = f'–¢—ã –≤ –ø–ª—é—Å–µ –Ω–∞ {"%.2f" % abs(user_balance)}'
        return message
    elif user_balance == 0:
        message = f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≤—Å—ë –ø–æ—Ä–æ–≤–Ω—É!'
        return message


def how_much(update, context):
    message = calculation(context, update)
    send_message(context, chat_id=update.effective_chat.id, text=message)


confiramtion_messages = (
    '–¥–∞',
    '–Ω–µ—Ç',
    '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
    '–Ω–µ —Å–æ–≥–ª–∞—Å–Ω–∞',
    '–¥–∞!',
    '–Ω–µ—Ç!',
)
problem_words = (
    '—Ü–µ–ª—É–µ—Ç',
    '—Ü–∞–ª—É–µ—Ç',
    '–æ–±–Ω–∏–º–∞–µ—Ç',
    '–æ–±–Ω–∏–º–∞—à–∫–∏',
    '—Ü–≤–µ—Ç–æ—á–∫–∏',
    '–ø–æ –±–∞–ª–¥–µ –Ω–∞–¥–∞—é',
)


def problem_recognition(update, context):
    message = update.message.text
    chat_id = update.effective_chat.id
    for word in message.lower().split():
        if word in problem_words:
            reason = word
            message = f'–ü–æ—á–µ–º—É –æ–Ω –Ω–µ {reason}? –Ø –µ–º—É –Ω–∞–¥–∞—é –ø–æ –±–∞–ª–¥–µ!üòà'
            send_message(context, chat_id, text=message)
    else:
        message = f'–†–µ–±—è—Ç–∫–∏, —É—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–ø–æ—Ä–Ω—ã–π –º–æ–º–µ–Ω—Ç–∏–∫ üòà. –ï—Å–ª–∏ —Ä–µ—à–∏–ª–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ –æ–∫ –∏ —è –æ—Ç—Å—Ç–∞–Ω—É)'
        send_message(context, chat_id, text=message)


def sum_recognition(
    update, context
):  # –ø–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä—É (—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ—Ç–æ–º). —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É —Ü–∏—Ñ—Ä—É –∏ –∫—Ç–æ –ø–ª–∞—Ç–∏–ª
    message = update.message.text
    payer = update.message.chat.first_name
    user_id = context._user_id_and_data[0]
    chat_id = update.effective_chat.id
    username = update.message.chat.username
    if message.lower() in ('–æ–∫', 'ok'):
        db.remove_complain(user_id)
        message = '–†–∞–¥, —á—Ç–æ –≤–æ–ø—Ä–æ—Å–∏–∫ —Ä–µ—à—ë–Ω, —Ä–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω)'
        send_message(context, chat_id, text=message)
        return
    if message.lower() in confiramtion_messages:
        db.set_complain(user_id)
        message = '–†–∞—Å—Å–∫–∞–∂–∏, –≤ —á—ë–º –¥–µ–ª–æ?'
        send_message(chat_id, text=message)

    elif db.complain_stataus(user_id):
        problem_recognition(update, context)
        return

    if payer in ['Artem', 'Ksenia']:  # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º—ã—Å–ª
        try:
            amount = float(update.message.text)
        except:
            if payer == 'Artem':
                message = f'{username}, –ø–æ –±–∞–ª–¥–µ –Ω–∞–¥–∞—é ü§™! –ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?'
            send_message(chat_id=chat_id, text=message, context=context)
            logger.error(f'–í–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ: {update.message.text}')
            raise TypeError('–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ')
        message = calculation(context, update, amount)
        send_message(context, chat_id, message)
    else:
        message = '–Ø –Ω–µ —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏. –°–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º'
        logger.error(f'–ù–æ–≤—ã–π —é–∑–µ—Ä –∑–∞–ª–µ–∑ –≤ —á–∞—Ç: {username}')
        send_message(context, ARTEM_ID, message)
        send_message(context, KSENIA_ID, message)


def reset_sum(update, context):
    all_users = db.get_users()
    db.reset_sum()
    payer = update.message.chat.first_name
    message = f'–°—É–º–º–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–º {payer}'
    for chat_id in all_users:
        send_message(context, chat_id[0], text=message)


def send_message(context, chat_id, text):
    context.bot.send_message(chat_id=chat_id, text=text)
    logger.debug(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}')


def main():
    updater = Updater(token=secret_token)

    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CommandHandler('reset', reset_sum))
    updater.dispatcher.add_handler(CommandHandler('how_much', how_much))
    updater.dispatcher.add_handler(
        MessageHandler(Filters.text, sum_recognition)
    )

    try:
        updater.start_polling()
    except:
        logger.critical('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω!')
        sys.exit()
    updater.idle()


if __name__ == '__main__':
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s, %(levelname)s, %(name)s, %(message)s, –°—Ç—Ä–æ–∫–∞: %(lineno)s,'
    )
    terminal_handler = StreamHandler(sys.stdout)
    terminal_handler.setFormatter(formatter)
    file_handler = logging.FileHandler('bot.log', encoding='UTF-8')
    file_handler.setFormatter(formatter)
    logger.addHandler(terminal_handler)
    logger.addHandler(file_handler)
    logging.basicConfig(
        level=logging.DEBUG,
        filename='program.log',
        format='%(asctime)s, %(levelname)s, %(message)s, %(name)s',
    )

    main()
