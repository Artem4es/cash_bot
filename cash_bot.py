from dotenv import load_dotenv
from logging import StreamHandler
import os
import sys
import logging

from telegram.ext import CommandHandler, Updater, MessageHandler, Filters
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove

from db import BotDB


logger = logging.getLogger(__name__)


load_dotenv()
secret_token = os.getenv('TOKEN')

db = BotDB('telebot.db')


def wake_up(update, context):
    user_id = context._user_id_and_data[0]
    username = update.message.chat.username
    name = update.message.chat.first_name
    chat = update.effective_chat
    if not db.user_exists(user_id):
        db.add_user(user_id, username)

    text = f'–ü—Ä–∏–≤–µ—Ç, {name}! –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ–µ—Ä–∫–∞–º–∏ –∑–∞–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—Éüëã'
    send_message(context, chat.id, text)


def calculation(context, update, amount=0):
    user_id = context._user_id_and_data[0]
    name = update.message.chat.first_name
    all_users = [user[0] for user in (db.get_users())]
    if amount != 0:
        db.add_sum(user_id, amount)
        message = f'–†–µ–±—è—Ç–∫–∏, {name}üòé —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª {amount}'
        for user_id in all_users:
            send_message(context, chat_id=user_id, text=message)
    total_paid = db.total()
    numer_of_users = len(all_users) 
    one_person_owes = total_paid / numer_of_users
    for user_id in all_users:
        user_total = db.total(user_id)
        user_balance = user_total - one_person_owes
        if user_balance < 0:
            message = f'–° —Ç–µ–±—è {"%.2f" % abs(user_balance)}'
            send_message(context, chat_id=user_id, text=message)
        elif user_balance > 0:
            message = f'üëç–¢—ã –≤ –ø–ª—é—Å–µ –Ω–∞ {"%.2f" % user_balance}'
            send_message(context, chat_id=user_id, text=message)
        elif user_balance == 0:
            message = f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç, –≤—Å—ë –ø–æ—Ä–æ–≤–Ω—É!ü•≥'
            send_message(context, chat_id=user_id, text=message)


def how_much(update, context):
    message = calculation(context, update)
    send_message(context, chat_id=update.effective_chat.id, text=message)


confiramtion_messages = (
    '–¥–∞',
    '–Ω–µ—Ç',
    '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
    '–Ω–µ —Å–æ–≥–ª–∞—Å–Ω–∞',
    '–¥–∞!',
    '–Ω–µ—Ç!',
)
problem_words = (
    '—Ü–µ–ª—É–µ—Ç',
    '—Ü–∞–ª—É–µ—Ç',
    '–æ–±–Ω–∏–º–∞–µ—Ç',
    '–æ–±–Ω–∏–º–∞—à–∫–∏',
    '—Ü–≤–µ—Ç–æ—á–∫–∏',
    '–ø–æ –±–∞–ª–¥–µ –Ω–∞–¥–∞—é',
)


def problem_recognition(update, context):
    message = update.message.text
    chat_id = update.effective_chat.id
    for word in message.lower().split():
        if word in problem_words:
            reason = word
            message = f'–ü–æ—á–µ–º—É –æ–Ω –Ω–µ {reason}? –Ø –µ–º—É –Ω–∞–¥–∞—é –ø–æ –±–∞–ª–¥–µ!üòà'
            send_message(context, chat_id, text=message)
    else:
        message = f'–†–µ–±—è—Ç–∫–∏, —É—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Å–ø–æ—Ä–Ω—ã–π –º–æ–º–µ–Ω—Ç–∏–∫ üòà. –ï—Å–ª–∏ —Ä–µ—à–∏–ª–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ –æ–∫ –∏ —è –æ—Ç—Å—Ç–∞–Ω—É)'
        send_message(context, chat_id, text=message)


def sum_recognition(update, context):
    message = update.message.text
    name = update.message.chat.first_name
    user_id = context._user_id_and_data[0]
    chat_id = update.effective_chat.id
    all_users = [user[0] for user in (db.get_users())]
    all_usernames = [user[0] for user in (db.get_usernames())]
        
        
    # if message.lower() in ('–æ–∫', 'ok'):
    #     db.remove_complain(user_id)
    #     message = '–†–∞–¥, —á—Ç–æ –≤–æ–ø—Ä–æ—Å–∏–∫ —Ä–µ—à—ë–Ω, —Ä–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤—ã–∫–ª—é—á–µ–Ω)'
    #     send_message(context, chat_id, text=message)
    #     return
    # if message.lower() in confiramtion_messages:
    #     db.set_complain(user_id)
    #     message = '–†–∞—Å—Å–∫–∞–∂–∏, –≤ —á—ë–º –¥–µ–ª–æ?'
    #     send_message(chat_id, text=message)

    # elif db.complain_stataus(user_id):
    #     problem_recognition(update, context)
    #     return

    if user_id in all_users:
        try:
            if message == 'üëÄ–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ':
                context.bot.send_message(chat_id, text='–õ–∞–¥–Ω–æ, –Ω–µ —à–∞–ª–∏ —Ç–∞–∫ –±–æ–ª—å—à–µü§°', reply_markup=ReplyKeyboardRemove())
                return

            elif message in all_usernames:
                db.delete_user(username=message)
                message = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}üí© —É–¥–∞–ª–∏–ª {message}'
                for user_id in all_users:
                    send_message(context, chat_id, text=message)
                return
            amount = float(update.message.text)
            calculation(context, update, amount)  
        except:
            message = f'{name},—ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –ü–æ –±–∞–ª–¥–µ –Ω–∞–¥–∞—é ü§™!'
            send_message(chat_id=chat_id, text=message, context=context)
            logger.error(f'–í–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ: {update.message.text}.–õ–∏–±–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    else:
        message = '–Ø –Ω–µ —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç –≤–≤–µ–¥–∏ /start'
        send_message(context, chat_id, message)


def reset_sum(update, context):
    all_users = [user[0] for user in (db.get_users())]
    db.reset_sum()
    name = update.message.chat.first_name
    message = f'–°—É–º–º–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–º {name}üí™'
    for chat_id in all_users:
        send_message(context, chat_id, text=message)



def send_message(context, chat_id, text):
    logger.debug(f'–ù–∞—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {chat_id}')
    try:
        context.bot.send_message(chat_id=chat_id, text=text)
        logger.debug(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}')
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}. –û—à–∏–±–∫–∞ {error}')    

def delete_user(update, context):
    all_usernames = [user[0] for user in (db.get_usernames())]
    all_usernames.append('üëÄ–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ')
    chat_id = update.effective_chat.id
    reply_markup = ReplyKeyboardMarkup(keyboard=[all_usernames], resize_keyboard=True, selective=True)

    try:
        context.bot.send_message(chat_id=chat_id, text='–ö–æ–≥–æ –∫–∏–∫–Ω—É—Ç—å?‚ò†Ô∏è', reply_markup=reply_markup)
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞. {error}')





def main():
    updater = Updater(token=secret_token)
    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CommandHandler('reset', reset_sum))
    updater.dispatcher.add_handler(CommandHandler('how_much', how_much))
    updater.dispatcher.add_handler(CommandHandler('kick_user', delete_user))
    updater.dispatcher.add_handler(
        MessageHandler(Filters.text, sum_recognition)
    )

    try:
        updater.start_polling()
        updater.idle()
    except:
        logger.critical('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω!')
        sys.exit()
    


if __name__ == '__main__':
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s, %(levelname)s, %(name)s, %(message)s, –°—Ç—Ä–æ–∫–∞: %(lineno)s,'
    )
    terminal_handler = StreamHandler(sys.stdout)
    terminal_handler.setFormatter(formatter)
    file_handler = logging.FileHandler('bot.log', encoding='UTF-8')
    file_handler.setFormatter(formatter)
    logger.addHandler(terminal_handler)
    logger.addHandler(file_handler)
    logging.basicConfig(
        level=logging.DEBUG,
        filename='program.log',
        format='%(asctime)s, %(levelname)s, %(message)s, %(name)s',
    )

    main()
