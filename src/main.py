from dotenv import load_dotenv
from logging import StreamHandler
import datetime
import os
import re
import sys
import logging

from telegram.ext import CommandHandler, Updater, MessageHandler, Filters
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Bot, BotCommand

from src.crud import user_exists, add_user, get_users, add_payment, get_period_payments, set_user_owes, set_min_pays_since, \
    delete_db_user, get_db_all_payments, delete_payments
from src.config import settings

from src.models import Users



logger = logging.getLogger(__name__)

load_dotenv()
SECRET_TOKEN = os.getenv('TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')






def wake_up(update, context):
    tg_id = context._user_id_and_data[0]
    username = update.message.chat.username
    name = update.message.chat.first_name
    chat = update.effective_chat
    # if not db.user_exists(user_id):
    if not user_exists(tg_id):
        # db.add_user(user_id, username)  # –¥–∞—Ç–∞ —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        add_user(tg_id, username)  # –¥–∞—Ç–∞ —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reply_markup = ReplyKeyboardMarkup(keyboard=[['–ü–æ–¥–µ–ª–∏—Ç—å –≤—Å—ë —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞'],['–°—á–∏—Ç–∞—Ç—å –º–æ–π –¥–æ–ª–≥ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã']], resize_keyboard=True)
        message = f'–ü—Ä–∏–≤–µ—Ç, {name}! –í–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –±—ã–ª–∏ –ø–ª–∞—Ç–µ–∂–∏ (—Å—É–º–º—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–µ–Ω—é). –í—ã–±–µ—Ä–∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
        send_message(context, chat.id, message, reply_markup=reply_markup)
        return

    text = f'–ü—Ä–∏–≤–µ—Ç, {name}! –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ–µ—Ä–∫–∞–º–∏ –∑–∞–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—Éüëã'
    send_message(context, chat.id, text, reply_markup=ReplyKeyboardRemove())


def calculation(update, context, amount=None):
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏ —Ä–µ–≥–∏–º –∏—Ö –∞—Ç—Ç—Ä–∏–±—É—Ç—ã
    name = update.effective_chat.username
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏ —Ä–µ–≥–∏–º –∏—Ö –∞—Ç—Ç—Ä–∏–±—É—Ç—ã
    user_info = dict()
    all_users: list[Users] = get_users()
    # all_users = [user[0] for user in (db.get_users())]
    for user in all_users:
        # user_id, username, pays_since = db.get_user_data(user_id)
        user_info[user.username] = [user.tg_id, user.pays_since]
        

    tg_id = context._user_id_and_data[0]
    if amount is not None:
        # db.add_sum(user_id, amount)
        add_payment(tg_id, amount)
        message = f'–†–µ–±—è—Ç–∫–∏, {name}üòé —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª {amount}'
        if len(all_users) == 1:
            message = f'{name} —Ç—ã –ø–æ–∫–∞ –æ–¥–∏–Ω –≤ —á–∞—Ç–∏–∫–µ –∏ –¥–æ–ª–∂–µ–Ω —Å–∞–º —Å–µ–±–µ)'
            return send_message(context=context, chat_id=tg_id, text=message)

        for user in all_users:
            send_message(context=context, chat_id=user.tg_id, text=message)

    times = list()
    for values in user_info.values():
        times.append(values[1])
    period_qty = len(times) - 1
    number_of_users = 1
    for i in range(period_qty):

        since = user_info[list(user_info)[i+1]][1]
        until = str(datetime.datetime.now())
        if not i == (period_qty-1):
            until = user_info[list(user_info)[i+2]][1]
        number_of_users += 1  # –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—ã—à–µ
        # totally_paid = db.get_period_payments(since=since, until=until)
        totally_paid: float = get_period_payments(since=since, until=until)
        if not totally_paid:
            send_message(context, tg_id, '–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–ª–∞—Ç–∏–ª')
        for i in range(number_of_users):
            username = list(user_info)[i]
            tg_id = user_info[username][0]
            totally_user: float = get_period_payments(since=since, until=until, user_id=tg_id)
            one_person_owes = totally_paid / number_of_users
            user_balance = round((totally_user - one_person_owes), 2)
            user_info[username].append(user_balance) 
    user_owes_dict = dict()       
    for username, value in user_info.items():
        user_owes = 0 
        for i in range(2, len(value)):
            user_owes += value[i]
            user_owes_dict[username] = user_owes
    
    for user, owes in user_owes_dict.items():
        if owes < 0:
            message = f'–° —Ç–µ–±—è {abs(owes)} —Ç—É–≥—Ä–∏–∫–æ–≤ü§∏üèª‚Äç‚ôÇÔ∏è'
        elif owes > 0:
            message = f'üëç–¢—ã –≤ –ø–ª—é—Å–µ –Ω–∞ {owes} —Ç—É–≥—Ä–∏–∫–æ–≤' 
        else:
            message = '–í–æ—Ç —ç—Ç–æ –¥–∞, —Ç—ã –≤ –Ω—É–ª–∏–Ω—É!ü•≥'
        tg_id = user_info[user][0]
        send_message(context, tg_id, message)
        # db.set_user_owes(tg_id, owes)
        set_user_owes(tg_id, owes)



def how_much(update, context):
    calculation(update, context)


def sum_recognition(update, context):
    message = update.message.text
    name = update.message.chat.first_name
    tg_id = context._user_id_and_data[0]
    chat_id = update.effective_chat.id
    # all_users = [user[0] for user in (db.get_users())]
    all_users = get_users()
    all_usernames = [user.username for user in all_users]
    user_tg_ids = [user.tg_id for user in all_users]
    if tg_id in user_tg_ids:
        # wants_to_say = db.public_message_status(tg_id)   ### –≠–¢–û –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ STATE aiogram
        try:
            # if wants_to_say == True:
            #     for user in all_users:
            #         send_message(context, user, message)
            #     # db.reset_public(tg_id)
            #     return

            if message == '–ü–æ–¥–µ–ª–∏—Ç—å –≤—Å—ë —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞':
                # db.set_pays_since(tg_id)
                set_min_pays_since(tg_id)
                return send_message(context, chat_id, '–û–∫–µ–π!–°—á–∏—Ç–∞–µ–º –æ—Ç –∏—Å—Ç–æ–∫–æ–≤)', reply_markup=ReplyKeyboardRemove())  # –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π

            elif message == '–°—á–∏—Ç–∞—Ç—å –º–æ–π –¥–æ–ª–≥ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã':
                return send_message(context, chat_id, '–û–∫–µ–π, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞', reply_markup=ReplyKeyboardRemove())

            elif message == 'üëÄ–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ':
                send_message(context=context, chat_id=chat_id, text='–õ–∞–¥–Ω–æ, –Ω–µ —à–∞–ª–∏ —Ç–∞–∫ –±–æ–ª—å—à–µü§°', reply_markup=ReplyKeyboardRemove())
                return

            elif message in all_usernames:
                # db.delete_user(username=message)
                delete_db_user(username=message)
                message = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}üí© —É–¥–∞–ª–∏–ª {message}'
                for tg_id in all_users:
                    send_message(context=context, chat_id=tg_id, text=message, reply_markup=ReplyKeyboardRemove())
                return
            validated_message = re.sub(r'(, )|(,)|(. )', '.', message)
            amount = float(validated_message)
            calculation(update, context, amount)

        except:
            message = f'{name},—ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –ü–æ –±–∞–ª–¥–µ –Ω–∞–¥–∞—é ü§™!'
            send_message(chat_id=chat_id, text=message, context=context, reply_markup=ReplyKeyboardRemove())
            logger.error(f'–í–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ: {update.message.text}.–õ–∏–±–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    else:
        
        message = '–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å—Å—è –Ω–∞–∂–º–∏ /start'
        send_message(context, chat_id, message)


def reset_sum(update, context):
    # all_users = [user[0] for user in (db.get_users())]
    all_users = get_users()
    # db.reset_sum()
    # db.set_user_owes()
    delete_payments()
    set_user_owes()
    name = update.message.chat.first_name
    message = f'–°—É–º–º–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {name}üí™'
    for user in all_users:
        send_message(context, user.tg_id, text=message)



def send_message(context, chat_id, text, parse_mode=None, reply_markup=None):
    logger.debug(f'–ù–∞—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {chat_id}')
    try:
        context.bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
        logger.debug(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}')
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}. –û—à–∏–±–∫–∞ {error}') 

def group_message(update, context):
    chat_id = update.effective_chat.id
    # db.set_public(chat_id)
    context.bot.send_message(chat_id=chat_id, text='–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –µ–≥–æ —É–≤–∏–¥—è—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏')

def delete_user(update, context):
    # all_users = [user[0] for user in (db.get_users())]
    all_users = get_users()
    users_tg_ids = {user.tg_id for user in all_users}
    all_usernames = [user.username for user in all_users]
    tg_id = update.effective_chat.id
    if tg_id in users_tg_ids:
        all_usernames.append('üëÄ–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ')
        tg_id = update.effective_chat.id
        reply_markup = ReplyKeyboardMarkup(keyboard=[all_usernames], resize_keyboard=True, selective=True)

        try:
            context.bot.send_message(chat_id=tg_id, text='–ö–æ–≥–æ –∫–∏–∫–Ω—É—Ç—å?‚ò†Ô∏è', reply_markup=reply_markup) # –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ send message

        except Exception as error:
            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞. {error}')
            return

    else:
        message = '–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å—Å—è –Ω–∞–∂–º–∏ /start'
        send_message(context, tg_id, message)


def get_all_payments(update=None, context=None):
    # if db.get_all_payments():
    all_payments = get_db_all_payments()
    if all_payments:
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ('username', 10.99, datetime)
        new_list = map(lambda el: (str(el[0]).center(10), str(el[1]).center(6), str(el[2])), all_payments)
        message = '\n'.join(map(lambda el: ' '.join(el), new_list))

        message = f"```\n{message}\n```"
    else:
        message = '–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π'

    if update and context:
        chat_id = update.effective_chat.id

    # return send_message(context=context, chat_id=chat_id,text='–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π', parse_mode='MarkdownV2')
    return send_message(context=context, chat_id=chat_id, text=message, parse_mode='MarkdownV2')


def main():
    updater = Updater(token=settings.bot_token)
    bot = Bot(token=settings.bot_token)
    bot.send_message(settings.admin_id, '–ú–µ–Ω—è –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–Ω–æ–≤–∞, —É—Ä–∞!')
    commands = [BotCommand('start', '–°—Ç–∞—Ä—Ç—É–µ–º!'), BotCommand('reset', '–û–±–Ω—É–ª–∏—Ç—å –¥–æ–ª–∂–æ–∫ —É –≤—Å–µ—Ö'),
                BotCommand('how_much', '–°–∫–æ–ª—å–∫–æ —Å –º–µ–Ω—è?'), BotCommand('all_payments', '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π'),
                BotCommand('kick_user', '–£–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞'), BotCommand('group_message', '–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ')]
    bot.set_my_commands(commands)
    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CommandHandler('reset', reset_sum))
    updater.dispatcher.add_handler(CommandHandler('how_much', how_much))
    updater.dispatcher.add_handler(CommandHandler('all_payments', get_all_payments))
    updater.dispatcher.add_handler(CommandHandler('kick_user', delete_user))
    updater.dispatcher.add_handler(CommandHandler('group_message', group_message))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, sum_recognition))

    try:
        updater.start_polling()
        updater.idle()

    except:
        logger.critical('–ù–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω!')
        sys.exit()
    


if __name__ == '__main__':
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s, %(levelname)s, %(name)s, %(message)s, –°—Ç—Ä–æ–∫–∞: %(lineno)s,'
    )
    terminal_handler = StreamHandler(sys.stdout)
    terminal_handler.setFormatter(formatter)
    file_handler = logging.FileHandler('src/logs/bot.log', encoding='UTF-8')
    file_handler.setFormatter(formatter)
    logger.addHandler(terminal_handler)
    logger.addHandler(file_handler)

    main()
